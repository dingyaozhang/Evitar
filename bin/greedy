use strict;
use warnings;

use Getopt::Std;
our $opt_P = 1;
our $opt_A = 20;
our $opt_M = 20000;
our $opt_c = 2;
our $opt_l = 300;
use vars qw($opt_i $opt_o $opt_l $opt_c $opt_r $opt_m $opt_w $opt_P $opt_A $opt_M $opt_F);
getopts('i:o:l:c:r:m:w:P:A:M:F');

use POSIX qw(floor);
use List::Util qw(max min sum);


######################################
my %geneweight;
my %refseqs;
my %adjustfactors;
my %refseqsmir;
my %adjustfactorsmir;
my @refkeys;
my @refkeysmir;

unless ($opt_F) {

if ($opt_w) {
	open WEIGHT, "$opt_w" or die;
	my $wl1 = <WEIGHT>;
	while (<WEIGHT>) {
		chomp;
		my @array = split(/\t/, $_);
		next if $array[2] == 0;
		my $purename = $array[0];
		$geneweight{$purename} = $array[2];
	}
	close WEIGHT;
}


local $/ = ">";
open REF, "$opt_r" or die;
my $fastanull = <REF>;

while (<REF>) {
	chomp;
	next if length $_ == 0;
	my @array = split(/\n/, $_);
	my $name = shift(@array);
	my $seq = join("", @array);
	my $purename = $name;
	if ($opt_w) {
		if (exists($geneweight{$purename})) {
			$adjustfactors{$purename} = $geneweight{$purename};
		}else{
			next;
		}
	}
	$seq =~ tr/a-z/A-Z/;
	$seq =~ s/U/T/g;
	if (exists($refseqs{$purename})) {
		$refseqs{$purename} = "$seq\t\t\t\t\t\t\t\t\t\t$refseqs{$purename}";
	}else{
		$refseqs{$purename} = $seq;
	}
}
close REF;


open REF, "$opt_m" or die;
$fastanull = <REF>;

while (<REF>) {
	chomp;
	next if length $_ == 0;
	my @array = split(/\n/, $_);
	my $name = shift(@array);
	my $seq = join("", @array);
	my $purename = $name;
	if ($opt_w) {
		if (exists($geneweight{$purename})) {
			$adjustfactorsmir{$purename} = $geneweight{$purename};
		}else{
			next;
		}
	}
	$seq =~ tr/a-z/A-Z/;
	$seq =~ s/U/T/g;
	if (exists($refseqsmir{$purename})) {
		$refseqsmir{$purename} = "$seq\t\t\t\t\t\t\t\t\t\t$refseqsmir{$purename}";
	}else{
		$refseqsmir{$purename} = $seq;
	}
}
close REF;

@refkeys = sort {$a cmp $b} keys(%refseqs);
@refkeysmir = sort {$a cmp $b} keys(%refseqsmir);
}

local $/ = "\n";
#######################


open IN, "$opt_i" or die;
open OUT, '>', "$opt_o" or die;
my @input;
my $line1 = <IN>;
unless ($opt_F) {
	chomp($line1);
	my @line1 = split(/\t/, $line1);
	splice @line1, 8, 0, qw(Wholetarget_Score Parttarget_Score MIRtarget_Score);
	my $output = join("\t", @line1);
	print OUT "$output\n";
}else{
	print OUT "$line1";
}

my %allstrains;
while (<IN>) {
	print OUT "$_" if $_ =~ m/^#/;
	next if $_ =~ m/^#/;
	chomp;
	my @array = split(/\t/, $_);
	my @samples = split(/\|/, $array[4]);
	my %temphash;
	for my $vartemptemp (@samples) {
		$temphash{$vartemptemp} = 1;
	}
	@samples = sort {$a <=> $b} keys %temphash;
	$array[3] = scalar @samples;
	$array[4] = join("|", @samples);
	my $new = join("\t", @array);
	push @input, $new;

	for my $varsample (@samples) {
		$allstrains{$varsample} = 1;
	}
}
my $strainnumber = scalar keys %allstrains;
@input = sort { (split(/\t/, $b))[3] <=> (split(/\t/, $a))[3] } @input;

my %covercondition;

while ($line1 = shift(@input)) {
	
	my @array = split(/\t/, $line1);
	my @samples = split(/\|/, $array[4]);
	my %temphash;
	for my $varsample (@samples) {
		$temphash{$varsample} += 1;
	}
	my @offres = targetit($array[1]);
	my $offres = shift(@offres);
	if ($offres == 1) {
		my @line1 = split(/\t/, $line1);
		splice @line1, 8, 0, @offres;
		my $output = join("\t", @line1);
		print OUT "$output\n";
		%covercondition = %temphash;
		last;
	}elsif($offres == 0) {
		next;
	}else{
		die "wrong offtarget result $offres\n";
	}
}
my $ti = 1;


LINE: while (@input) {

	#print "a\n";
	my @scores;
	for my $var (@input) {
		my @array = split(/\t/, $var);
		my @samples = split(/\|/, $array[4]);
		my $thisscore = 0;
		for my $varsample (@samples) {
			if (exists($covercondition{$varsample})) {
				unless ($covercondition{$varsample} >= $opt_c) {
					$thisscore += 1;
				}
			}else{
				$thisscore += 1;
			}
		}
		push @scores, $thisscore;
	}
	
	my @outputsamples;
	while (@input) {
		#print "b\n";
		my $maxposition;
		my $maxvalue = max(@scores);
		if ($maxvalue == 0) {
			my %temp;
			for my $varkey (keys(%covercondition)) {
				if ($covercondition{$varkey} >= $opt_c + 1) {
					$temp{$varkey} = $covercondition{$varkey} - $opt_c;
				}
			}
			%covercondition = %temp;
			next LINE;
		}
		
		my $index = 0;
		AB:for my $var (@scores) {
			
			if ($var == $maxvalue) {
				$maxposition = $index;
				last AB;
			}
			$index += 1;
		}
		my $output = splice @input, $maxposition, 1;
		splice @scores, $maxposition, 1;
		my @output = split(/\t/, $output);
		@outputsamples = split(/\|/, $output[4]);
		$output[3] = $maxvalue;
		
		
		my @offres = targetit($output[1]);
		my $offres = shift(@offres);
		if ($offres == 1) {
			#print @output;
			splice @output, 8, 0, @offres;
			$output = join("\t", @output);
			print OUT "$output\n";
			$ti += 1;
			last;
		}elsif($offres == 0) {
			next;
		}else{
			die "wrong offtarget result $offres\n";
		}

	}
	
	last if scalar @input == 0;

	for my $varsample (@outputsamples) {
		$covercondition{$varsample} += 1;
	}
	if ((scalar keys %covercondition) == $strainnumber) {
		my $reboot = 1;
		CCA:for my $varkey (keys(%covercondition)) {
				if ($covercondition{$varkey} < $opt_c) {
					$reboot = 0;
					last CCA;
				}
			}
		if ($reboot == 1) {
		my %temp;
		for my $varkey (keys(%covercondition)) {
			if ($covercondition{$varkey} >= $opt_c + 1) {
				$temp{$varkey} = $covercondition{$varkey} - $opt_c;
			}
		}
		%covercondition = %temp;
		}
	}
	if ($ti >= $opt_l) {
		last LINE;
	}
}




sub eightmermatch {
	my $mrnatarget = $_[0];
	my @seqnames = @{$_[1]};
	my %seqhash = %{$_[2]};
	my $seedseq = substr $mrnatarget, 13, 8;
	my @names;
	for my $seqone (@seqnames) {
		my $genomeseq = $seqhash{$seqone};
		if ($genomeseq =~ m/$seedseq/) {
			push @names, $seqone;
		}
	}
	return @names;
}

sub wholematch {
	my $mrnatarget = $_[0];
	my @seqnames = @{$_[1]};
	my %seqhash = %{$_[2]};
	my @names;
	for my $seqone (@seqnames) {
		my $genomeseq = $seqhash{$seqone};
		if ($genomeseq =~ m/$mrnatarget/) {
			push @names, $seqone;
		}
	}
	return @names;
}

sub partmatch {
	my $mrnatarget = $_[0];
	my @seqnames = @{$_[1]};
	my %seqhash = %{$_[2]};
	my $seedseq = substr $mrnatarget, 13, 8;
	my @names;
	for my $seqone (@seqnames) {
		my $genomeseq = $seqhash{$seqone};
		LINE: while ($genomeseq =~ m/$seedseq/g) {
			my $beginposindex = (length $`) - 1;
			my $matchregion = substr $genomeseq, $beginposindex-12, 21;
			my $matchc = &acgtmatch($matchregion, $mrnatarget);
			if ($matchc >= 18) {
				push @names, $seqone;
				last LINE;
			}
		}
	}
	return @names;
	
}

sub acgtmatch {
	my $seqa = $_[0];
	my $seqb = $_[1];
	my $match = ($seqa ^ $seqb) =~ tr/\0//;
	return $match;
}

sub targetit {
		return qw(1) if $opt_F;
		my $mirnacandidate = $_[0];
		$mirnacandidate =~ tr/a-z/A-Z/;
		$mirnacandidate =~ s/U/T/g;

		my @mirnas = &eightmermatch($mirnacandidate, \@refkeysmir, \%refseqsmir);
		my @wholes = &wholematch($mirnacandidate, \@refkeys, \%refseqs);
		my @parts = &partmatch($mirnacandidate, \@refkeys, \%refseqs);
		my $wholescore = 0;
		my $partscore = 0;
		my $mirscore = 0;
		if ($opt_w) {
			my $lenwholes = 0;
			my $lenparts = 0;
			for my $nameone (@wholes) {
				$wholescore += $adjustfactors{$nameone};
			}
			for my $nameone (@parts) {
				$partscore += $adjustfactors{$nameone};
			}
			for my $nameone (@mirnas) {
				$mirscore += $adjustfactors{$nameone};
			}
		}else{
			$wholescore = scalar @wholes;
			$partscore = scalar @parts;
			$mirscore = scalar @mirnas;
		}
		my $sense = 1;
		if ($wholescore >= $opt_P) {
			$sense = 0;
		}
		if ($partscore >= $opt_A) {
			$sense = 0;
		}
		if ($mirscore >= $opt_M) {
			$sense = 0;
		}
		my @out = ($sense, $wholescore, $partscore, $mirscore);
		return(@out);
}
